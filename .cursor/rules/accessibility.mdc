---
description: WCAG 2.2 accessibility guidelines for semantic HTML, ARIA labels, and keyboard navigation
globs: ["**/*.tsx", "**/*.ts", "**/*.jsx", "**/*.js"]
alwaysApply: false
---

# Accessibility Guidelines (WCAG 2.2 Compliance)

## Semantic HTML

### Use Proper HTML Elements

```tsx
// Good: Semantic HTML structure
<main>
  <header>
    <nav>
      <ul>
        <li><a href="/home">Home</a></li>
        <li><a href="/blog">Blog</a></li>
        <li><a href="/contact">Contact</a></li>
      </ul>
    </nav>
  </header>

  <article>
    <h1>Blog Post Title</h1>
    <p>Content goes here...</p>
  </article>

  <aside>
    <h2>Related Posts</h2>
    <ul>
      <li><a href="/post-1">Related Post 1</a></li>
    </ul>
  </aside>
</main>

// Bad: Generic divs without semantic meaning
<div className="main">
  <div className="header">
    <div className="nav">
      <div className="nav-item">Home</div>
    </div>
  </div>
</div>
```

### Heading Hierarchy

```tsx
// Good: Proper heading hierarchy
<main>
  <h1>Main Page Title</h1>
  <section>
    <h2>Section Title</h2>
    <h3>Subsection Title</h3>
    <h4>Sub-subsection Title</h4>
  </section>
</main>

// Bad: Skipping heading levels
<main>
  <h1>Main Title</h1>
  <h4>Skipped h2 and h3</h4> {/* WCAG violation */}
</main>
```

### Form Elements

```tsx
// Good: Proper form structure with labels
<form onSubmit={handleSubmit}>
  <fieldset>
    <legend>Contact Information</legend>

    <div>
      <label htmlFor="name">Full Name *</label>
      <input
        id="name"
        type="text"
        required
        aria-describedby="name-error"
        aria-invalid={errors.name ? "true" : "false"}
      />
      {errors.name && (
        <div id="name-error" role="alert" className="error">
          {errors.name}
        </div>
      )}
    </div>

    <div>
      <label htmlFor="email">Email Address *</label>
      <input id="email" type="email" required aria-describedby="email-help" />
      <div id="email-help" className="help-text">
        We'll never share your email address
      </div>
    </div>
  </fieldset>

  <button type="submit">Send Message</button>
</form>
```

## ARIA Labels and Properties

### Essential ARIA Attributes

```tsx
// aria-label for elements without visible text
<button aria-label="Close modal" onClick={closeModal}>
  <CloseIcon />
</button>

// aria-labelledby for referencing other elements
<section aria-labelledby="blog-heading">
  <h2 id="blog-heading">Latest Blog Posts</h2>
  {/* Blog content */}
</section>

// aria-describedby for additional descriptions
<input
  type="password"
  aria-describedby="pwd-help"
  aria-required="true"
/>
<div id="pwd-help">
  Password must be at least 8 characters long
</div>
```

### Live Regions

```tsx
// Announce dynamic content changes
<div aria-live="polite" aria-atomic="true">
  {isLoading ? "Loading posts..." : `${posts.length} posts loaded`}
</div>

// For urgent announcements
<div aria-live="assertive" role="alert">
  {errorMessage && `Error: ${errorMessage}`}
</div>

// Status updates
<div role="status" aria-live="polite">
  {saveStatus}
</div>
```

### Interactive Elements

```tsx
// Expandable sections
<button
  aria-expanded={isExpanded}
  aria-controls="collapsible-content"
  onClick={toggleExpanded}
>
  {isExpanded ? "Hide" : "Show"} Advanced Options
</button>
<div
  id="collapsible-content"
  aria-hidden={!isExpanded}
  className={isExpanded ? "visible" : "hidden"}
>
  {/* Collapsible content */}
</div>

// Modal dialogs
<div
  role="dialog"
  aria-modal="true"
  aria-labelledby="modal-title"
  aria-describedby="modal-description"
>
  <h2 id="modal-title">Confirm Action</h2>
  <p id="modal-description">Are you sure you want to delete this post?</p>
  <button onClick={confirmDelete}>Yes, Delete</button>
  <button onClick={closeModal}>Cancel</button>
</div>
```

### Lists and Navigation

```tsx
// Navigation with current page indication
<nav aria-label="Main navigation">
  <ul role="list">
    <li>
      <a href="/home" aria-current={currentPage === "home" ? "page" : undefined}>
        Home
      </a>
    </li>
    <li>
      <a href="/blog" aria-current={currentPage === "blog" ? "page" : undefined}>
        Blog
      </a>
    </li>
  </ul>
</nav>

// Breadcrumb navigation
<nav aria-label="Breadcrumb">
  <ol role="list">
    <li><a href="/">Home</a></li>
    <li><a href="/blog">Blog</a></li>
    <li aria-current="page">Current Post Title</li>
  </ol>
</nav>
```

## Keyboard Navigation

### Focus Management

```tsx
// Custom button with proper keyboard support
interface ButtonProps {
  children: React.ReactNode;
  onClick: () => void;
  disabled?: boolean;
}

export function Button({ children, onClick, disabled = false }: ButtonProps) {
  const handleKeyDown = (event: React.KeyboardEvent) => {
    if (event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      if (!disabled) {
        onClick();
      }
    }
  };

  return (
    <button
      onClick={onClick}
      onKeyDown={handleKeyDown}
      disabled={disabled}
      tabIndex={disabled ? -1 : 0}
      className={`focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${disabled ? "cursor-not-allowed opacity-50" : "cursor-pointer"} `}
    >
      {children}
    </button>
  );
}
```

### Tab Order and Focus Trapping

```tsx
// Modal with focus trapping
export function Modal({ isOpen, onClose, children }: ModalProps) {
  const modalRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (isOpen) {
      // Focus first focusable element
      const firstFocusable = modalRef.current?.querySelector(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
      ) as HTMLElement;
      firstFocusable?.focus();
    }
  }, [isOpen]);

  const handleKeyDown = (event: React.KeyboardEvent) => {
    if (event.key === "Escape") {
      onClose();
    }

    // Trap focus within modal
    if (event.key === "Tab") {
      const focusableElements = modalRef.current?.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
      );

      if (focusableElements && focusableElements.length > 0) {
        const firstElement = focusableElements[0] as HTMLElement;
        const lastElement = focusableElements[
          focusableElements.length - 1
        ] as HTMLElement;

        if (event.shiftKey && document.activeElement === firstElement) {
          event.preventDefault();
          lastElement.focus();
        } else if (!event.shiftKey && document.activeElement === lastElement) {
          event.preventDefault();
          firstElement.focus();
        }
      }
    }
  };

  if (!isOpen) return null;

  return (
    <div
      ref={modalRef}
      role="dialog"
      aria-modal="true"
      onKeyDown={handleKeyDown}
      className="fixed inset-0 z-50 bg-black bg-opacity-50"
    >
      <div className="flex min-h-screen items-center justify-center p-4">
        <div className="w-full max-w-md rounded-lg bg-white p-6">
          {children}
        </div>
      </div>
    </div>
  );
}
```

### Skip Links

```tsx
// Skip to main content link
export function SkipLink() {
  return (
    <a
      href="#main-content"
      className="sr-only rounded bg-blue-600 px-4 py-2 text-white focus:not-sr-only focus:absolute focus:left-4 focus:top-4 focus:z-50"
    >
      Skip to main content
    </a>
  );
}

// Usage in layout
export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div>
      <SkipLink />
      <header>
        <nav>Navigation content</nav>
      </header>
      <main id="main-content" tabIndex={-1}>
        {children}
      </main>
    </div>
  );
}
```

## Images and Media

### Alternative Text

```tsx
// Informative images
<img
  src={post.mainImage.url}
  alt={`Illustration for "${post.title}" blog post showing...`}
  width={800}
  height={400}
/>

// Decorative images
<img
  src="/decorative-pattern.svg"
  alt=""
  role="presentation"
/>

// Complex images with descriptions
<figure>
  <img
    src="/chart.png"
    alt="Sales performance chart"
    aria-describedby="chart-description"
  />
  <figcaption id="chart-description">
    Sales increased from $10K in January to $25K in December,
    showing steady growth throughout the year.
  </figcaption>
</figure>
```

### Video and Audio

```tsx
// Video with captions and transcript
<video controls aria-describedby="video-description">
  <source src="/video.mp4" type="video/mp4" />
  <track
    kind="captions"
    src="/captions.vtt"
    srcLang="en"
    label="English captions"
  />
  <p>Your browser doesn't support video. <a href="/transcript">Read transcript</a></p>
</video>
<div id="video-description">
  A demonstration of the new features in our latest update.
</div>
```

## Color and Contrast

### Color Guidelines

```tsx
// Good: Don't rely solely on color
<div className="status-indicator">
  <span className="text-red-600">
    <ErrorIcon aria-hidden="true" />
    Error: Please fix the required fields
  </span>
</div>

// Bad: Color-only indication
<div className="text-red-600">Error</div>
```

### Focus Indicators

```css
/* Ensure visible focus indicators */
.custom-button:focus {
  outline: 2px solid #2563eb;
  outline-offset: 2px;
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .custom-button {
    border: 2px solid;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .animation {
    animation: none;
  }

  .transition {
    transition: none;
  }
}
```

## Screen Reader Support

### Screen Reader Only Content

```tsx
// Provide context for screen readers
<div className="sr-only">
  This section contains a list of blog posts with search and filter options.
</div>

<input
  type="search"
  placeholder="Search posts..."
  aria-label="Search blog posts"
/>

// Reading order considerations
<article>
  <h2>Blog Post Title</h2>
  <div className="sr-only">Published on</div>
  <time dateTime="2024-01-15">January 15, 2024</time>
  <div className="sr-only">by</div>
  <address>John Doe</address>
  <p>Post content...</p>
</article>
```

### Table Accessibility

```tsx
// Data table with proper headers
<table>
  <caption>Blog Post Statistics for 2024</caption>
  <thead>
    <tr>
      <th scope="col">Month</th>
      <th scope="col">Posts Published</th>
      <th scope="col">Page Views</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">January</th>
      <td>5</td>
      <td>1,234</td>
    </tr>
  </tbody>
</table>
```

## Testing and Validation

### Accessibility Testing

```tsx
// Use React Testing Library for accessibility testing
import { render, screen } from "@testing-library/react";
import { axe, toHaveNoViolations } from "jest-axe";

expect.extend(toHaveNoViolations);

test("should be accessible", async () => {
  const { container } = render(<BlogPost post={mockPost} />);
  const results = await axe(container);
  expect(results).toHaveNoViolations();
});

// Test keyboard navigation
test("should be keyboard navigable", () => {
  render(<BlogPost post={mockPost} />);

  const firstLink = screen.getByRole("link", { name: /read more/i });
  firstLink.focus();
  expect(firstLink).toHaveFocus();
});
```

### Manual Testing Checklist

```tsx
/*
WCAG 2.2 AA Compliance Checklist:

Perceivable:
□ All images have appropriate alt text
□ Color contrast ratio ≥ 4.5:1 for normal text
□ Color contrast ratio ≥ 3:1 for large text
□ Content doesn't rely solely on color
□ Text can be resized to 200% without loss of functionality

Operable:
□ All functionality available via keyboard
□ No content flashes more than 3 times per second
□ Users can pause, stop, or hide moving content
□ Page has descriptive title
□ Focus indicators are visible

Understandable:
□ Language of page is identified
□ Navigation is consistent
□ Form errors are clearly identified
□ Form labels and instructions are provided

Robust:
□ Valid HTML markup
□ Content works with assistive technologies
□ ARIA attributes are used correctly
*/
```

## Common Patterns

### Loading States

```tsx
// Accessible loading indicator
export function LoadingSpinner({
  message = "Loading...",
}: {
  message?: string;
}) {
  return (
    <div role="status" aria-live="polite">
      <div
        className="h-8 w-8 animate-spin rounded-full border-b-2 border-blue-600"
        aria-hidden="true"
      />
      <span className="sr-only">{message}</span>
    </div>
  );
}
```

### Error Messages

```tsx
// Accessible error handling
export function ErrorMessage({ error }: { error: string }) {
  return (
    <div
      role="alert"
      aria-live="assertive"
      className="rounded border border-red-200 bg-red-50 px-4 py-3 text-red-700"
    >
      <strong>Error:</strong> {error}
    </div>
  );
}
```

### Progressive Enhancement

```tsx
// Ensure functionality without JavaScript
export function SearchForm() {
  return (
    <form action="/search" method="GET">
      <label htmlFor="search-input">Search posts:</label>
      <input id="search-input" name="q" type="search" required />
      <button type="submit">Search</button>
    </form>
  );
}
```
