---
description: Tailwind CSS v4 styling guidelines and utility class best practices
globs: ["**/*.tsx", "**/*.ts", "**/*.css"]
alwaysApply: false
---

# Tailwind CSS Guidelines

## Class Organization

### Class Order

1. **Layout**: display, position, top, right, bottom, left
2. **Box Model**: width, height, margin, padding
3. **Typography**: font, text, line-height
4. **Visual**: background, border, shadow
5. **Interactive**: hover, focus, active states

```tsx
// Good class organization
<div className="
  flex items-center justify-between
  w-full h-12
  px-4 py-2
  text-sm font-medium
  bg-white border border-gray-200 rounded-lg
  hover:bg-gray-50 focus:ring-2 focus:ring-blue-500
">
```

### Responsive Design

```tsx
// Mobile-first approach
<div className="
  w-full
  md:w-1/2
  lg:w-1/3
  xl:w-1/4
">
```

## Component Styling

### Button Components

```tsx
const buttonVariants = {
  primary: "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500",
  secondary: "bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500",
  danger: "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500",
};

interface ButtonProps {
  variant?: keyof typeof buttonVariants;
  size?: "sm" | "md" | "lg";
  children: React.ReactNode;
}

export function Button({
  variant = "primary",
  size = "md",
  children,
}: ButtonProps) {
  const baseClasses =
    "inline-flex items-center justify-center rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2";
  const sizeClasses = {
    sm: "px-3 py-1.5 text-sm",
    md: "px-4 py-2 text-sm",
    lg: "px-6 py-3 text-base",
  };

  return (
    <button
      className={`${baseClasses} ${buttonVariants[variant]} ${sizeClasses[size]}`}
    >
      {children}
    </button>
  );
}
```

### Card Components

```tsx
export function Card({
  children,
  className = "",
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <div
      className={`rounded-lg border border-gray-200 bg-white shadow-sm transition-shadow duration-200 hover:shadow-md ${className} `}
    >
      {children}
    </div>
  );
}
```

## Dark Mode Support

### Theme-Aware Components

```tsx
export function ThemeAwareCard({ children }: { children: React.ReactNode }) {
  return (
    <div className="rounded-lg border border-gray-200 bg-white text-gray-900 shadow-sm dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100">
      {children}
    </div>
  );
}
```

### Color Palette

```tsx
// Primary colors
const primaryColors = {
  50: "bg-blue-50 dark:bg-blue-900/20",
  100: "bg-blue-100 dark:bg-blue-900/30",
  500: "bg-blue-500 dark:bg-blue-400",
  600: "bg-blue-600 dark:bg-blue-500",
  700: "bg-blue-700 dark:bg-blue-600",
};

// Neutral colors
const neutralColors = {
  50: "bg-gray-50 dark:bg-gray-900",
  100: "bg-gray-100 dark:bg-gray-800",
  200: "bg-gray-200 dark:bg-gray-700",
  300: "bg-gray-300 dark:bg-gray-600",
  400: "bg-gray-400 dark:bg-gray-500",
  500: "bg-gray-500 dark:bg-gray-400",
  600: "bg-gray-600 dark:bg-gray-300",
  700: "bg-gray-700 dark:bg-gray-200",
  800: "bg-gray-800 dark:bg-gray-100",
  900: "bg-gray-900 dark:bg-gray-50",
};
```

## Layout Patterns

### Flexbox Layouts

```tsx
// Centered content
<div className="flex items-center justify-center min-h-screen">
  <div className="text-center">
    <h1 className="text-4xl font-bold mb-4">Centered Content</h1>
    <p className="text-gray-600">This content is perfectly centered</p>
  </div>
</div>

// Sidebar layout
<div className="flex min-h-screen">
  <aside className="w-64 bg-gray-50 dark:bg-gray-800">
    {/* Sidebar content */}
  </aside>
  <main className="flex-1 p-6">
    {/* Main content */}
  </main>
</div>

// Grid layout
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
  {/* Grid items */}
</div>
```

### Spacing System

```tsx
// Consistent spacing
const spacing = {
  xs: "space-y-1",
  sm: "space-y-2",
  md: "space-y-4",
  lg: "space-y-6",
  xl: "space-y-8",
  "2xl": "space-y-12",
};

// Usage
<div className={`${spacing.md} p-6`}>
  <h2>Title</h2>
  <p>Description</p>
  <button>Action</button>
</div>;
```

## Typography

### Text Styles

```tsx
const textStyles = {
  h1: "text-4xl font-bold tracking-tight",
  h2: "text-3xl font-semibold tracking-tight",
  h3: "text-2xl font-semibold",
  h4: "text-xl font-medium",
  body: "text-base leading-relaxed",
  small: "text-sm text-gray-600 dark:text-gray-400",
  caption: "text-xs text-gray-500 dark:text-gray-500",
};

// Usage
<h1 className={textStyles.h1}>Main Heading</h1>
<p className={textStyles.body}>Body text with good readability</p>
```

### Font Weights

```tsx
const fontWeights = {
  light: "font-light",
  normal: "font-normal",
  medium: "font-medium",
  semibold: "font-semibold",
  bold: "font-bold",
  extrabold: "font-extrabold",
};
```

## Interactive States

### Hover Effects

```tsx
// Subtle hover effects
<button className="
  bg-blue-600 text-white
  hover:bg-blue-700
  active:bg-blue-800
  focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
  transition-colors duration-200
">
  Click me
</button>

// Card hover effects
<div className="
  bg-white rounded-lg border border-gray-200
  hover:shadow-lg hover:border-gray-300
  transition-all duration-200 ease-in-out
  cursor-pointer
">
  {/* Card content */}
</div>
```

### Focus States

```tsx
// Accessible focus states
<input className="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-800 dark:text-white" />
```

## Animation and Transitions

### Transition Classes

```tsx
const transitions = {
  fast: "transition-all duration-150 ease-in-out",
  normal: "transition-all duration-200 ease-in-out",
  slow: "transition-all duration-300 ease-in-out",
  bounce: "transition-all duration-200 ease-bounce",
};

// Usage
<div className={`${transitions.normal} hover:scale-105`}>
  {/* Animated content */}
</div>;
```

### Loading States

```tsx
// Skeleton loading
<div className="animate-pulse">
  <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
  <div className="h-4 bg-gray-200 rounded w-1/2"></div>
</div>

// Spinner
<div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
```

## Custom Utilities

### Custom Classes

```css
/* In globals.css */
@layer utilities {
  .text-balance {
    text-wrap: balance;
  }

  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
}
```

### Component Variants

```tsx
// Using clsx or classnames for conditional classes
import clsx from "clsx";

interface BadgeProps {
  variant?: "default" | "success" | "warning" | "error";
  size?: "sm" | "md" | "lg";
  children: React.ReactNode;
}

export function Badge({
  variant = "default",
  size = "md",
  children,
}: BadgeProps) {
  const baseClasses = "inline-flex items-center rounded-full font-medium";

  const variantClasses = {
    default: "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200",
    success:
      "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
    warning:
      "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200",
    error: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200",
  };

  const sizeClasses = {
    sm: "px-2 py-0.5 text-xs",
    md: "px-2.5 py-0.5 text-sm",
    lg: "px-3 py-1 text-sm",
  };

  return (
    <span
      className={clsx(baseClasses, variantClasses[variant], sizeClasses[size])}
    >
      {children}
    </span>
  );
}
```

## Performance Considerations

### Purge CSS

- Use consistent class names
- Avoid dynamic class generation
- Use safelist for critical classes
- Monitor bundle size

### Critical CSS

```tsx
// Inline critical styles for above-the-fold content
<style
  dangerouslySetInnerHTML={{
    __html: `
    .hero-section {
      @apply bg-gradient-to-r from-blue-600 to-purple-600;
    }
  `,
  }}
/>
```

description:
globs:
alwaysApply: false

---
